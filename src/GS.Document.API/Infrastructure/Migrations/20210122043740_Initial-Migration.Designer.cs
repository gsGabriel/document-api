// <auto-generated />
using System;
using GS.Document.Infra.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace GS.Document.API.Infrastructure.Migrations
{
    [DbContext(typeof(DocumentContext))]
    [Migration("20210122043740_Initial-Migration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseSerialColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("GS.Document.Domain.Aggregates.CustomerAggregate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.HasKey("Id")
                        .HasName("pk_wallet_id");

                    b.ToTable("customers", "public");
                });

            modelBuilder.Entity("GS.Document.Domain.Entities.Documents", b =>
                {
                    b.Property<Guid>("_id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content_type");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<Guid>("_customerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.HasKey("_id")
                        .HasName("pk_wallet_id");

                    b.HasIndex("_customerId");

                    b.ToTable("documents", "public");
                });

            modelBuilder.Entity("GS.Document.Domain.Entities.Documents", b =>
                {
                    b.HasOne("GS.Document.Domain.Aggregates.CustomerAggregate", null)
                        .WithMany("Documents")
                        .HasForeignKey("_customerId")
                        .HasConstraintName("fk_customer_documents")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GS.Document.Domain.Aggregates.CustomerAggregate", b =>
                {
                    b.Navigation("Documents");
                });
#pragma warning restore 612, 618
        }
    }
}
